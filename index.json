[{"date":"2024-01-05","permalink":"https://askyx.github.io/posts/build/","summary":"shell git clone --depth=1 https://hub.fgit.cf/greenplum-db/gpdb.git -b 7.0.0 docker run -itd --name gpdb --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/gpdb,target=/workspaces/gpdb runner bash docker exec -it -u vscode gpdb bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/gpdb # 不支持其他文件夹编译，只能在gpdb目录下 cd /workspaces/gpdb sudo apt install -y libkrb5-dev krb5-config iproute2 libossp-uuid-dev libapr1-dev libyaml-dev libxerces-c-dev less rsync pip libevent-dev ./configure --with-perl --enable-orca --with-python --with-libxml --with-gssapi --enable-debug CFLAGS=-O0 CXXFLAGS=-O0 --prefix=/home/vscode/.build make -j64 \u0026amp;\u0026amp; make install # .bashrc 文件 cat \u0026gt; /home/vscode/.bashrc \u0026lt;\u0026lt;EOF source /home/vscode/.build/greenplum_path.sh alias psql=\u0026#39;psql -p 7000\u0026#39; alias gpstart=\u0026#39;gpstart -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1\u0026#39; alias gpstop=\u0026#39;gpstop -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1\u0026#39; alias sqps=\u0026#34;echo \u0026#39;USER PID PPID VSZ CMD\u0026#39; ; ps -eo user,pid,ppid,vsize,cmd | grep -E \u0026#39;postgres\u0026#39; \u0026#34; EOF","tags":["数据库","Postgres","GreenPlum","源码编译"],"title":"源码编译 GreenPlum 速通版"},{"date":"2024-01-05","permalink":"https://askyx.github.io/posts/build/","summary":"shell git clone --depth=1 https://hub.fgit.cf/OpenTenBase/OpenTenBase.git docker run -itd --name tbase --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/OpenTenBase,target=/workspaces/OpenTenBase runner bash docker exec -it -u vscode tbase bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/OpenTenBase mkdir -p .build/making mkdir .data cd .build/making /workspaces/OpenTenBase/configure --prefix=/home/vscode/.build --enable-user-switch --with-openssl --with-ossp-uuid --enable-alltype-distri CFLAGS=\u0026#34;-fgnu89-inline -g -O0\u0026#34; make -j64 \u0026amp;\u0026amp; make install \u0026amp;\u0026amp; cd contrib \u0026amp;\u0026amp; make -j64 \u0026amp;\u0026amp; make install cd ~ mkdir pgxc_ctl # 写入下面的模板 touch pgxc_ctl/pg.conf # ssh localhost pgxc_ctl -c pg.conf init all createdb -p 6011 vscode # .bashrc 文件 此外，/home/vscode/.build/bin 需要写入到 /etc/environment cat \u0026gt; /home/vscode/.bashrc","tags":["数据库","Postgres","OpenTenBase","源码编译"],"title":"源码编译 OpenTenBase 速通版"},{"date":"2024-01-05","permalink":"https://askyx.github.io/posts/env_common/","summary":"docker file FROMubuntuLABEL description=\u0026#34;build xxxxx regress env\u0026#34;# x86_64RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list# armRUN sed -i s@/ports.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.listRUN sed -i s@/security.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.listRUN apt-get update \u0026amp;\u0026amp; apt-get upgrade -y RUN apt-get install -y flex bison g++ gcc gdb make libzstd-dev libxml2-dev libcurl4-openssl-dev vim libbz2-dev libperl-dev software-properties-common \\ pkg-config libreadline-dev python3-dev libldap-dev zlib1g-dev openssh-server iputils-ping libxslt-dev libpam-dev libssl-dev libreadline6-dev \\ libssh2-1-dev cmake ninja-build sudo locales # GP# libkrb5-dev krb5-config iproute2 libossp-uuid-dev libapr1-dev libyaml-dev libxerces-c-dev less rsync pip# RUN pip install gssapi psycopg2 psutil -i https://pypi.tuna.tsinghua.edu.cn/simpleRUN sudo locale-gen en_US.UTF-8RUN apt-get clean \u0026amp;\u0026amp; apt-get autocleanRUN useradd -ms /bin/bash vscode \u0026amp;\u0026amp; echo \u0026#39;vscode ALL=(ALL) NOPASSWD:ALL\u0026#39; \u0026gt;\u0026gt; /etc/sudoersRUN echo \u0026#39;export LANG=en_US.utf8\u0026#39; \u0026gt;\u0026gt; /home/vscode/.bashrcUSERvscodeshell docker build -f Dockerfile -t runner . docker run -itd --name xx_name --hostname vscode --mount type=bind,source=/home/asky/xx_source,target=/workspaces/xx_target runner bash docker exec -it -u vscode xx_name bash","tags":["数据库","源码编译"],"title":"源码编译环境准备文件"},{"date":"2023-12-21","permalink":"https://askyx.github.io/posts/one_line/","summary":"操作系统 NUMA 多核架构中CPU通过BUS访问RAM，所以有了距离上的区别，带来了速度上的差距，NUMA 通过划分RAM和CPU为不同的node，通过配置不同的程序运行策略来解决此问题 由于默认策略为优先使用同一个node，所以Mysql 在使用大量内存的时候，内存占用多个node，导致内存","tags":null,"title":"名词一行解释"},{"date":"2023-08-09","permalink":"https://askyx.github.io/posts/cmake/","summary":"cmake 速记模板 添加第三方库 include(FetchContent) function(get_third_dep dep_name dep_url dep_tag) FetchContent_Declare(${dep_name} QUIET SOURCE_DIR ${CMAKE_BINARY_DIR}/_deps/src/${dep_name} BINARY_DIR ${CMAKE_BINARY_DIR}/_deps/build/${dep_name} SUBBUILD_DIR ${CMAKE_BINARY_DIR}/_deps/sub/${dep_name} GIT_REPOSITORY ${dep_url} GIT_TAG ${dep_tag} GIT_PROGRESS TRUE GIT_SHALLOW TRUE ) FetchContent_MakeAvailable(${dep_name}) endfunction(get_third_dep) get_third_dep(spdlog https://ghproxy.com/https://github.com/gabime/spdlog.git v1.11.0) get_third_dep(googletest https://ghproxy.com/https://github.com/google/googletest.git release-1.12.1) get_third_dep(asio https://ghproxy.com/https://github.com/chriskohlhoff/asio.git asio-1-28-0) # 添加 head only 库 add_library(asio INTERFACE) target_include_directories(asio INTERFACE ${CMAKE_BINARY_DIR}/_deps/src/asio/asio/include ) target_compile_definitions(asio INTERFACE ASIO_STANDALONE ASIO_NO_DEPRECATED ) target_link_libraries(asio INTERFACE pthread ) 添加 yacc lex 编译 find_package(FLEX REQUIRED) find_package(BISON 3.5.0 REQUIRED) bison_target(parser ${PROJECT_SOURCE_DIR}/src/parser/parser.yy ${PROJECT_SOURCE_DIR}/src/parser/parser.cpp # DEFINES_FILE ${PROJECT_SOURCE_DIR}/src/include/parser/parser.hpp COMPILE_FLAGS ${bison_flags}) flex_target(scanner ${PROJECT_SOURCE_DIR}/src/parser/scanner.lex ${PROJECT_SOURCE_DIR}/src/parser/scanner.cpp) ADD_FLEX_BISON_DEPENDENCY(scanner parser) add_library(ASKY_lib SHARED ${ASKY_SRC} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} ) 添加单元测试 function(add_cosmos_test test_name test_file) add_executable(${test_name} ${test_file}) target_link_libraries(${test_name} PRIVATE gtest gtest_main ASKY_lib) add_test(NAME ${test_name} COMMAND ${test_name}) endfunction(add_cosmos_test) foreach(TEST_SOURCE_FILE ${ASKY_TEST_SRC}) file(RELATIVE_PATH ASKY_TEST_CPP_REL \u0026#34;${PROJECT_SOURCE_DIR}/test\u0026#34; ${TEST_SOURCE_FILE}) get_filename_component(NOISEPAGE_TEST_DIR ${ASKY_TEST_CPP_REL} DIRECTORY) get_filename_component(NOISEPAGE_TEST ${TEST_SOURCE_FILE} NAME_WE) add_cosmos_test(${NOISEPAGE_TEST} ${TEST_SOURCE_FILE}) endforeach() 添加 自定义 command # clang-format add_custom_target(format","tags":["C/C++","cmake","模板库"],"title":"cmake 速查模板"},{"date":"2023-05-08","permalink":"https://askyx.github.io/posts/optimizer/","summary":"1. 逻辑优化 1. 子查询提升 exist 相关子链接会被提升，非相关子链接不会进行优化， 但是会生成 initplan，只需要执行一次 any 相关子查询不会提升，非相关子查询才能进行优化，实际上any的非相关子查询隐含一个外部引用的条件， 实际上还是相关子查询 如果是 join 条件中的子链接，则需要遵守 \u0026ldquo;any 的 左边需要是对","tags":null,"title":"Postgres 技术内幕，Optimizer过程分析"},{"date":"2023-02-22","permalink":"https://askyx.github.io/posts/defineinc/","summary":"前置知识 C语言宏的定义和宏的使用方法 变长参数 这里输出的是相同类型的参数日志，不同的需要特殊处理，或者直接自定义输出格式 缺点： 参数类型固定 #include \u0026lt;stdio.h\u0026gt; double xxa = 1.0f; double xxb = 1.2f; double xxc = 1.3f; double xxd = 1.4f; double xxe = 1.5f; double xxf = 1.6f; double xxg = 1.7f; double xxh = 1.8f; double xxi = 1.9f; #define DUMPVAR(VAR) #VAR \u0026#34;(%.2lf)\u0026#34; #define FL_DOARG1(a, ...) DUMPVAR(a) #define FL_DOARG2(a, v, ...) FL_DOARG1(a) \u0026#34;, \u0026#34; FL_DOARG1(v, __VA_ARGS__) #define FL_DOARG3(a, v, ...) FL_DOARG1(a) \u0026#34;, \u0026#34; FL_DOARG2(v, __VA_ARGS__) #define FL_DOARG4(a, v, ...) FL_DOARG1(a) \u0026#34;, \u0026#34; FL_DOARG3(v,","tags":["C/C++","宏","日志"],"title":"宏使用模板速查"},{"date":"2023-02-17","permalink":"https://askyx.github.io/posts/cost/","summary":"表和各个index的物理结构及数据操作 统计信息 cost 计算 demo 选择率的计算 基表cost index cost pageinspect PostgreSQL索引系列文章链接汇总 统计信息与选择率与代价计算 当前统计信息会收集下面数据，可以使用视图 pg_stats 查看，在使用统计信息的时候，使用相关信息计算选择率 * Histogram：直方图，这个数据","tags":null,"title":"执行计划代价计算规则梳理"},{"date":"2023-02-10","permalink":"https://askyx.github.io/posts/postgres_executor/","summary":"Tue Feb 7 10:19:24 CST 2023 重构， 不想文章变成无用的流水线 节点 refs openGauss数据库源码解析系列文章——执行器解析（二 Postgresql查询执行模块README笔记 执行方式分为两大类，一类是 utility 执行，用于ddl等，底层直接对接某个函数，一类是 dml 算子执行，按树的形式执行，这里关注 dml 算子 总的四大","tags":["数据库","Postgres","执行器"],"title":"Postgres Executor"},{"date":"2023-02-08","permalink":"https://askyx.github.io/posts/tx/","summary":"事务基础 ACID 事务演进 隔离级别 MVCC 2pl 主流数据库实现 PG事务 pg高链接数导致tps下降 1|2 简单总结 更新xmin的ping-pong问题，缓存失效，之前的结构设计不合理，xid存放位置不连续，且xmin每次都需要从 pgxact 中获取，此值会被频繁修改 修改 事务相关的组织格式，xids 现在单独存放在数组中","tags":null,"title":"事务知识简记"},{"date":"2022-11-17","permalink":"https://askyx.github.io/posts/note/","summary":"note As Bison reads tokens, it pushes them onto a stack along with their semantic values. The stack is called the parser stack. Pushing a token is traditionally called shifting. When the last n tokens and groupings shifted match the components of a grammar rule, they can be combined according to that rule. This is called reduction The lookahead token is stored in the variable yychar. Its semantic value and location, if any, are stored in the variables yylval and yylloc. This situation, where either a shift or a reduction would be valid, is called a shift/reduce conflict, Bison is designed to resolve these conflicts by choosing to shift, unless otherwise directed by operator precedence declarations. if_stmt: \u0026#34;if\u0026#34; expr \u0026#34;then\u0026#34; stmt | \u0026#34;if\u0026#34; expr \u0026#34;then\u0026#34; stmt \u0026#34;else\u0026#34; stmt ; if x then if y then win; else lose; if x","tags":null,"title":"Bison Note"},{"date":"2022-11-08","permalink":"https://askyx.github.io/posts/libpqxx/","summary":"定位 c++的客户端接口，官方指定，特点时使用比较激进的C++实现，最新代码编译需要支持C++17，下个版本需要C++20，和其他pg对外接口实现类似的功能，但是由于使用C++实现，所以源码不多，可以用来快速的熟悉此类工具的大致的结构，后期可以去过一遍ODBC 01 直接全局搜索exte","tags":null,"title":"Libpqxx"},{"date":"2022-11-01","permalink":"https://askyx.github.io/posts/memctx/","summary":"内存上下文 https://smartkeyerror.com/PostgreSQL-MemoryContext 源码主要在mctx.c中，主要是目的是设置工作空间，避免重复的在系统上申请资源，且为了避免异常情况下的内存泄露问题，所以实现了内存上下文 目前有三种底层的实现 AllocSet(常规的内存分配机制，先分配block，之后再从block上分配chunk，分配得内存一般不会释","tags":null,"title":"内存管理"},{"date":"2022-10-21","permalink":"https://askyx.github.io/posts/rocksdb/","summary":"note1 slice 和levelDB类似，无太大变化 PinnableSlice http://kernelmaker.github.io/Rocksdb_pinnableslice 主要作用是延长数据生命周期，减少数据拷贝。PinnableSlice中记录数据的指针，使用的时候通过指针进行解引用。不需要从最底层进行数据的copy，数据的生命周期使用Reset和其析构函数确定，此时调用cleanup注册的cleanup函","tags":["源码阅读","RocksDB","存储引擎"],"title":"RocksDB源码分析"},{"date":"2022-10-10","permalink":"https://askyx.github.io/posts/parser/","summary":"BISON 1.2 From Formal Rules to Bison Input Terminal Nonterminal 1.3 Semantic Values A formal grammar selects tokens only by their classifications each token in a Bison grammar has both a token kind and a semantic value 强类型，有类型和值的区别 1.4 Semantic Actions The action says how to produce the semantic value 1.5 Writing GLR Parsers 略，默认是LR文法，但是有RR和SR冲突，所以为了不那么严格限制语法，在一定程度上允许冲突。这里不做了解 1.6 Locations produce verbose and useful error messages 1.7 Bison Output: the Parser Implementation File The tokens come from a function called the","tags":["数据库","Postgres","Parser","编译原理"],"title":"postgres Parser"},{"date":"2022-09-28","permalink":"https://askyx.github.io/posts/locks/","summary":"SpinLock 使用tas实现的自旋锁。 while (TAS_SPIN(lock)) { perform_spin_delay(\u0026amp;delayStatus); } perform_spin_delay(SpinDelayStatus *status) { /* CPU-specific delay each time through the loop */ SPIN_DELAY(); /* Block the process every spins_per_delay tries */ if (++(status-\u0026gt;spins) \u0026gt;= spins_per_delay) { if (++(status-\u0026gt;delays) \u0026gt; NUM_DELAYS) s_lock_stuck(status-\u0026gt;file, status-\u0026gt;line, status-\u0026gt;func); if (status-\u0026gt;cur_delay == 0) /* first time to delay? */ status-\u0026gt;cur_delay = MIN_DELAY_USEC; pg_usleep(status-\u0026gt;cur_delay); /* increase delay by a random fraction between 1X and 2X */ status-\u0026gt;cur_delay += (int) (status-\u0026gt;cur_delay * pg_prng_double(\u0026amp;pg_global_prng_state) + 0.5); /* wrap back to minimum delay when max is exceeded */ if (status-\u0026gt;cur_delay \u0026gt; MAX_DELAY_USEC) status-\u0026gt;cur_delay = MIN_DELAY_USEC; status-\u0026gt;spins = 0; } } 如果没有tas，则使用信号量实现，属于最底层的锁 LWLock https://zhmin.github.io/posts/postgresql-lwlock/ 文档描述清楚","tags":["数据库","Postgres","LOCK"],"title":"Locks"},{"date":"2022-09-26","permalink":"https://askyx.github.io/posts/vacuum/","summary":"语句的具体信息参考pg说明文档 http://postgres.cn/docs/12/routine-vacuuming.html http://postgres.cn/docs/12/sql-vacuum.html http://postgres.cn/docs/12/sql-analyze.html antdb对功能进行增强，可以cn上执行语句然后收集统计信息，更新cn的元数据信息等操作，且数据变动会同步到其他cn节点和gtm 节点 vacuum cn执行vacuum的入口为ExecVacuum，具体执行函数为vacuum，此函数在后续会被其他节点调用，用","tags":["数据库","Postgres","VACUUM"],"title":"vacuum 和 analyze 过程分析"},{"date":"2022-07-22","permalink":"https://askyx.github.io/posts/opt/","summary":"Postgres Optimizer Extend 对文章的技术性验证 These directories take the Query structure returned by the parser, and generate a plan used by the executor. The /plan directory generates the actual output plan, the /path code generates all possible ways to join the tables, and /prep handles various preprocessing steps for special cases. /util is utility stuff. /geqo is the separate \u0026ldquo;genetic optimization\u0026rdquo; planner \u0026mdash; it does a semi-random search through the join tree space, rather than exhaustively considering all possible join trees. (But each join considered by /geqo is given to /path to create paths for, so we consider all possible implementation paths for each specific join pair even in GEQO mode.) /plan directory generates the actual output plan /path code generates all possible ways to join the tables /prep handles various preprocessing steps","tags":["数据库","Postgres","优化器"],"title":"Postgres Optimizer"},{"date":"2022-07-21","permalink":"https://askyx.github.io/posts/storage/","summary":"存储 内存 共享内存 本地内存 缓存 内存上下文 缓存空间管理 数据块的缓存，减少磁盘IO，有共享缓存和进程缓存 Cache 数据块之外的缓存，例如系统表 系统表缓存不会缓存整个表，是以block为单位缓存？ 虚拟文件描述符 系统中文件有打开的上限，使用VFD可以突破这种限制，本质上是一个LRU缓存 空闲空间定位","tags":["数据库","Postgres","存储"],"title":"Postgres Storage"},{"date":"2022-07-20","permalink":"https://askyx.github.io/posts/env/","summary":"源码编译 环境准备，这里使用Ubuntu22，执行命令sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list替换源，更新系统 源码下载 直接下载最新源码，github上的源码每一个提交都保证是可编译运行的 git clone git@github.com:postgres/postgres.git 依赖安装 sudo apt-get -y install flex \\ bison \\ libreadline-dev \\ libssl-dev \\ libpam-dev \\ libxml2 \\ libxml2-dev \\ libxslt-dev \\ libldap-dev \\ libperl-dev \\ python3-dev\\ zlib1g-dev \\ libssh2-1-dev \\ gdb \\ c++ \\ gcc \\","tags":null,"title":"Postgres源码编译及调试"},{"date":"2022-07-20","permalink":"https://askyx.github.io/posts/note/","summary":"爬虫 import requests from bs4 import BeautifulSoup prefix = \u0026#39;http://mysql.taobao.org\u0026#39; # 获取文章名和url（文章名,url） def query_name_url(url: str): resp = requests.get(url) soup = BeautifulSoup(resp.content.decode(\u0026#39;utf-8\u0026#39;), \u0026#34;html.parser\u0026#34;) tags = soup.findAll(\u0026#39;a\u0026#39;, {\u0026#39;target\u0026#39;: {\u0026#39;_blank\u0026#39;}}) urls = [v for v in tags if v[\u0026#39;href\u0026#39;].find(\u0026#39;/monthly/\u0026#39;) != -1] return [(str(v.string).strip(), prefix + v[\u0026#39;href\u0026#39;]) for v in urls] # 获取所有月报链接（月报名,url） def query_monthly_url(): resp = requests.get(\u0026#39;http://mysql.taobao.org/monthly/\u0026#39;) soup = BeautifulSoup(resp.content.decode(\u0026#39;utf-8\u0026#39;), \u0026#34;html.parser\u0026#34;) tags = soup.findAll(\u0026#39;a\u0026#39;, {\u0026#39;class\u0026#39;: {\u0026#39;main\u0026#39;}}) urls = [v for v in tags if v[\u0026#39;href\u0026#39;].find(\u0026#39;/monthly/\u0026#39;) != -1] return [(str(v.string).strip(), prefix + v[\u0026#39;href\u0026#39;]) for v in urls] # 获取所有文章名、URL和对应的月报链接（文章","tags":["资源","数据库"],"title":"数据库文章资源汇总"},{"date":"2022-06-10","permalink":"https://askyx.github.io/posts/note/","summary":"https://15445.courses.cs.cmu.edu/fall2021/notes/02-advancedsql.pdf output control 控制输出结果，例如order，limit等 窗口函数 CTE Common Table Expressions，把一个语句的输出视为一张临时表参与下面的语句的运算 WITH cte1 (col1) AS (SELECT 1), cte2 (col2) AS (SELECT 2) SELECT * FROM cte1, cte2; Database Storage 数据库的存储介质当前还是磁盘，IO慢 数据库存储要点之一是使用缓存维护数据在磁盘和内存之间的数据交换，以实现数","tags":["课程","数据库","15445"],"title":"15445课程笔记"},{"date":"2022-05-30","permalink":"https://askyx.github.io/posts/raft/","summary":"译文 原文 有用的飞书文档 和其他的算法相比 Strong leader 日志只能从领导者发送到其他节点 Leader election 随机计时器选举领导，在心跳机制上加上一些额外的工作 Membership changes 角色变换 Replicated state machines 复制状态机一般基于日志实现，通俗的理解只要所有的机器按照相同的顺序执行指令，那么每个节点的状态都是确定的，所以需要把指令日志复制到其他节","tags":["论文","Raft","6.824"],"title":"Raft"},{"date":"2022-05-30","permalink":"https://askyx.github.io/posts/gfs/","summary":"GFS是一个大规模可扩展的可容错的分布式文件系统。Google三大篇论文之一 翻译文章在这里 论文在这里 6.824 Q\u0026amp;A GFS的特点 运行在廉价的机器上，节约成本 灵活性强，可随意扩展，容错性强 文件尾部追加数据，不会有太多的数据变动 架构 一个单独的master节点和多个datachunk节点，mast","tags":["论文","GFS","6.824"],"title":"GFS"},{"date":"2022-05-29","permalink":"https://askyx.github.io/posts/mapreduce/","summary":"利用普通机器组成的大规模计算集群进行并行的,高容错,高性能的数据处理函数框架 原始论文点这里,论文翻译点这里，有时间的话，自行对比翻译和原文 最终实现的目标是\u0026ndash;实现一个分布式系统，对程序员隐藏底层分布式细节，程序员只需要定义map和reduce 函数即可。 map reduce实现","tags":["论文","Mapreduce","6.824"],"title":"Mapreduce"},{"date":"2022-05-17","permalink":"https://askyx.github.io/posts/go_1/","summary":"2022-05-17 基础语法 2022-05-24 复合类型，goroutine，channel 基础语法 Packages go使用Packages维护模块，使用import导入模块，import最后一个元素才是需要导入的模块 import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; ) import 可以单独一个导入一个模块，也可以批量导入， 与之对应的是export，go不显示声明export，首字","tags":null,"title":"A Tour of Go速通"},{"date":"2022-05-17","permalink":"https://askyx.github.io/posts/coursenote/","summary":"随堂笔记 Why do people build distributed systems? to increase capacity via parallel processing to tolerate faults via replication to match distribution of physical devices e.g. sensors to achieve security via isolation 分布式的困难点： 大量的并发操作 具有容错性 难于实现 Lab 1: distributed big-data framework (like MapReduce) Lab 2: fault tolerance library using replication (Raft) Lab 3: a simple fault-tolerant database Lab 4: scalable database performance via sharding A big goal: hide the complexity of distribution from applications. Topic: fault tolerance 1000s of servers, big network -\u0026gt; always something broken We\u0026rsquo;d like to hide these failures from the application. \u0026ldquo;High availability\u0026rdquo;: service continues despite failures Big idea: replicated servers. If one server crashes, can proceed using the other(s). Labs 2 and 3","tags":null,"title":"Coursenote"},{"date":"2022-05-15","permalink":"https://askyx.github.io/posts/leveldb/","summary":"LevelDB: version 1.23 Date: Thu Oct 20 15:32:47 2022 CPU: 16 * AMD Ryzen 9 5900HS with Radeon Graphics CPUCache: 512 KB Keys: 16 bytes each Values: 100 bytes each (50 bytes after compression) Entries: 1000000 RawSize: 110.6 MB (estimated) FileSize: 62.9 MB (estimated) ------------------------------------------------ fillseq : 1.394 micros/op; 79.3 MB/s fillsync : 1208.178 micros/op; 0.1 MB/s (1000 ops) fillrandom : 1.948 micros/op; 56.8 MB/s overwrite : 2.448 micros/op; 45.2 MB/s readrandom : 3.251 micros/op; (864322 of 1000000 found) readrandom : 2.947 micros/op; (864083 of 1000000 found) readseq : 0.126 micros/op; 878.1 MB/s readreverse : 0.216 micros/op; 511.4 MB/s compact : 473557.000 micros/op; readrandom : 2.174 micros/op; (864105 of 1000000 found) readseq : 0.111 micros/op; 997.1 MB/s readreverse : 0.185 micros/op; 598.0 MB/s fill100K : 530.603 micros/op; 179.8 MB/s (1000 ops) crc32c : 0.904 micros/op; 4322.1 MB/s (4K per op)","tags":["源码阅读","LevelDB","存储引擎"],"title":"LevelDB源码阅读"},{"date":"2022-04-04","permalink":"https://askyx.github.io/posts/volcanooptimizer/","summary":"NOTE 论文阅读笔记The Volcano Optimizer Generator: Extensibility and Efficient Search 可扩展 面向对象 自顶向下 剪枝 原型是EXODUS， Volcano是对他的改进 可以单独使用的优化器 优化搜索时间和搜索空间 可扩展 可以使用启发式算法和有效的代价模型来扩展和减少搜索空间，【剪枝】 灵活的成本计算模型 一个框架，优化器生成器，可以由“optimi","tags":null,"title":"VolcanoOptimizer"},{"date":"2022-04-02","permalink":"https://askyx.github.io/posts/columbia-optimizer/","summary":"start EFFICIENCY IN THE COLUMBIA DATABASE QUERY OPTIMIZER 优化器发展版本 第一代 模块化的，分层的，可扩展的，基于规则的优化器 扩展的复杂性，搜索性能 第二代 类似Volcano，更加优秀的优化规则，且使用物理属性参与优化，使用新的搜索方式 更加灵活，但是还是难与扩展 第三代 使用面对象的思想实现的优化器，易于扩展，更灵活 可以按照搜索策","tags":null,"title":"Columbia Optimizer"},{"date":"2022-03-24","permalink":"https://askyx.github.io/posts/log/","summary":"面试 只是一个技术汇总 C++基础 [2 days] [课程- https://github.com/parallel101/course.git] 内存 内存结构 [https://segmentfault.com/a/1190000039348996] c++ 编译出来的是可执行文件，是ELF格式的，他本来就有一些格式上的划分，C++在他的基础上进行了更细的划分，分为五个部分，从高地址到底地址依次为： 1. 内核虚拟内存 进程的虚拟印象 2. 栈 程序自动控制，具体为程序的函数调用，保存局部变","tags":null,"title":"面试"},{"date":"2022-03-06","permalink":"https://askyx.github.io/posts/%E7%8E%B0%E4%BB%A3c-%E7%99%BD%E7%9A%AE%E4%B9%A6/","summary":"读者序 之前没有好好的阅读过一本任何技术书籍，一般都是打开前几张，然后慢慢的失去耐心，所有造成的问题是一些书籍上的知识，只会对前面的章节有记忆，而大多数的书籍前面的章节也只是他书籍的入门介绍而已，所以我是个半吊子程序员，工作两年半之后，这个问题越来越困扰着我，有时候看见别人的面帖，","tags":["读书笔记","C++"],"title":"现代C++白皮书"},{"date":"2022-02-21","permalink":"https://askyx.github.io/about/","summary":"ヾ(•ω•`)o 比较胆小，出门都得贴墙走","tags":null,"title":"关于我"},{"date":"2022-02-21","permalink":"https://askyx.github.io/posts/envs/","summary":"hugo wget https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb https://github.91chi.fun/https://github.com//gohugoio/hugo/releases/download/v0.92.2/hugo_extended_0.92.2_Linux-64bit.deb sudo dpkg -i hugo*.deb 140.82.113.3 aria2c -s 5 https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb 可以使用aria2下载，ubuntu使用apt install aria2直接安装工具，使用-s开启多路下载 aria2c -s 5 https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb manager用户 https://www.jianshu.com/p/a76a93e8c662 Unix 分区问题，集群上多块磁盘分区挂载到指定目录 fdisk disk 可以对一个磁盘进行分区的添加和删除等操作 p d w h 添加磁盘挂载 lsblk -f 查看磁盘 mkfs.xfs -f -n ftype=1 /dev/sdb1 格","tags":null,"title":"Envs"},{"date":"2022-02-20","permalink":"https://askyx.github.io/posts/docker/","summary":"基础概念 Docker使用go开发的一种沙箱工具，他使得应用可以单独运行在沙箱中，通过端口映射或者volumes与外界进行交互。这可以让一个机器上可以运行多种不同环境的应用且互不干扰，例如一个比较大型的引用，使用的此方式单独维护一个模块，使得系统的可靠性大大增强 容器 镜像运行的实例，","tags":["Docker"],"title":"Docker"},{"date":"2022-02-20","permalink":"https://askyx.github.io/posts/cpp/","summary":"编译器 把高级语言编译成可执行语言工具，分为前端后后端，前端值得是高级语言的解析，后端是指翻译解析之后的结果为机器语言 多文件 ** 连接 多文件编译可以有两种方式，一是直接编译为一个可以执行文件，二是按模块或者按文件编译为库，然后连接到执行文件 连接方式有两种， 一是静态连接，把所有的库文件打","tags":["读书笔记","C++"],"title":"C++ Primer Plus"},{"date":"0001-01-01","permalink":"https://askyx.github.io/posts/%E7%AE%80%E5%8E%86/","summary":"文磊 个人信息 性 别：男 年 龄：28 手 机：18705169510 邮 箱：404061090@qq.com 工作及教育经历 湖南亚信安慧科技有限公司 2022.7~now AntDB-T SQL内核研发工程师 主要负责优化器对分布式执行计划的优化 星环科技有限公司 2022.2~2022.3 基础架构部-数据库研发工程师 主要职责为负责ArgoDB数据库存储引擎","tags":null,"title":""},{"date":"0001-01-01","permalink":"https://askyx.github.io/search/","summary":"","tags":null,"title":"Search Results"}]