<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Asky</title><link>https://askyx.github.io/posts/</link><description>Recent content in Posts on Asky</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 05 Jan 2024 11:07:23 +0800</lastBuildDate><atom:link href="https://askyx.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>源码编译 GreenPlum 速通版</title><link>https://askyx.github.io/posts/build/</link><pubDate>Fri, 05 Jan 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/build/</guid><description>shell git clone --depth=1 https://hub.fgit.cf/greenplum-db/gpdb.git -b 7.0.0 docker run -itd --name gpdb --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/gpdb,target=/workspaces/gpdb runner bash docker exec -it -u vscode gpdb bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/gpdb # 不支持其他文件夹编译，只能在gpdb目录下 cd /workspaces/gpdb sudo apt install -y libkrb5-dev krb5-config iproute2 libossp-uuid-dev libapr1-dev libyaml-dev libxerces-c-dev less rsync pip libevent-dev ./configure --with-perl --enable-orca --with-python --with-libxml --with-gssapi --enable-debug CFLAGS=-O0 CXXFLAGS=-O0 --prefix=/home/vscode/.build make -j64 &amp;amp;&amp;amp; make install # .bashrc 文件 cat &amp;gt; /home/vscode/.bashrc &amp;lt;&amp;lt;EOF source /home/vscode/.build/greenplum_path.sh alias psql=&amp;#39;psql -p 7000&amp;#39; alias gpstart=&amp;#39;gpstart -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1&amp;#39; alias gpstop=&amp;#39;gpstop -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1&amp;#39; alias sqps=&amp;#34;echo &amp;#39;USER PID PPID VSZ CMD&amp;#39; ; ps -eo user,pid,ppid,vsize,cmd | grep -E &amp;#39;postgres&amp;#39; &amp;#34; EOF</description></item><item><title>源码编译 OpenTenBase 速通版</title><link>https://askyx.github.io/posts/build/</link><pubDate>Fri, 05 Jan 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/build/</guid><description>shell git clone --depth=1 https://hub.fgit.cf/OpenTenBase/OpenTenBase.git docker run -itd --name tbase --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/OpenTenBase,target=/workspaces/OpenTenBase runner bash docker exec -it -u vscode tbase bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/OpenTenBase mkdir -p .build/making mkdir .data cd .build/making /workspaces/OpenTenBase/configure --prefix=/home/vscode/.build --enable-user-switch --with-openssl --with-ossp-uuid --enable-alltype-distri CFLAGS=&amp;#34;-fgnu89-inline -g -O0&amp;#34; make -j64 &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd contrib &amp;amp;&amp;amp; make -j64 &amp;amp;&amp;amp; make install cd ~ mkdir pgxc_ctl # 写入下面的模板 touch pgxc_ctl/pg.conf # ssh localhost pgxc_ctl -c pg.conf init all createdb -p 6011 vscode # .bashrc 文件 此外，/home/vscode/.build/bin 需要写入到 /etc/environment cat &amp;gt; /home/vscode/.bashrc</description></item><item><title>源码编译环境准备文件</title><link>https://askyx.github.io/posts/env_common/</link><pubDate>Fri, 05 Jan 2024 09:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/env_common/</guid><description>docker file FROMubuntuLABEL description=&amp;#34;build xxxxx regress env&amp;#34;# x86_64RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list# armRUN sed -i s@/ports.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.listRUN sed -i s@/security.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.listRUN apt-get update &amp;amp;&amp;amp; apt-get upgrade -y RUN apt-get install -y flex bison g++ gcc gdb make libzstd-dev libxml2-dev libcurl4-openssl-dev vim libbz2-dev libperl-dev software-properties-common \ pkg-config libreadline-dev python3-dev libldap-dev zlib1g-dev openssh-server iputils-ping libxslt-dev libpam-dev libssl-dev libreadline6-dev \ libssh2-1-dev cmake ninja-build sudo locales # GP# libkrb5-dev krb5-config iproute2 libossp-uuid-dev libapr1-dev libyaml-dev libxerces-c-dev less rsync pip# RUN pip install gssapi psycopg2 psutil -i https://pypi.tuna.tsinghua.edu.cn/simpleRUN sudo locale-gen en_US.UTF-8RUN apt-get clean &amp;amp;&amp;amp; apt-get autocleanRUN useradd -ms /bin/bash vscode &amp;amp;&amp;amp; echo &amp;#39;vscode ALL=(ALL) NOPASSWD:ALL&amp;#39; &amp;gt;&amp;gt; /etc/sudoersRUN echo &amp;#39;export LANG=en_US.utf8&amp;#39; &amp;gt;&amp;gt; /home/vscode/.bashrcUSERvscodeshell docker build -f Dockerfile -t runner . docker run -itd --name xx_name --hostname vscode --mount type=bind,source=/home/asky/xx_source,target=/workspaces/xx_target runner bash docker exec -it -u vscode xx_name bash</description></item><item><title>名词一行解释</title><link>https://askyx.github.io/posts/one_line/</link><pubDate>Thu, 21 Dec 2023 16:28:35 +0800</pubDate><guid>https://askyx.github.io/posts/one_line/</guid><description>操作系统 NUMA 多核架构中CPU通过BUS访问RAM，所以有了距离上的区别，带来了速度上的差距，NUMA 通过划分RAM和CPU为不同的node，通过配置不同的程序运行策略来解决此问题 由于默认策略为优先使用同一个node，所以Mysql 在使用大量内存的时候，内存占用多个node，导致内存</description></item><item><title>cmake 速查模板</title><link>https://askyx.github.io/posts/cmake/</link><pubDate>Wed, 09 Aug 2023 17:34:54 +0800</pubDate><guid>https://askyx.github.io/posts/cmake/</guid><description>cmake 速记模板 添加第三方库 include(FetchContent) function(get_third_dep dep_name dep_url dep_tag) FetchContent_Declare(${dep_name} QUIET SOURCE_DIR ${CMAKE_BINARY_DIR}/_deps/src/${dep_name} BINARY_DIR ${CMAKE_BINARY_DIR}/_deps/build/${dep_name} SUBBUILD_DIR ${CMAKE_BINARY_DIR}/_deps/sub/${dep_name} GIT_REPOSITORY ${dep_url} GIT_TAG ${dep_tag} GIT_PROGRESS TRUE GIT_SHALLOW TRUE ) FetchContent_MakeAvailable(${dep_name}) endfunction(get_third_dep) get_third_dep(spdlog https://ghproxy.com/https://github.com/gabime/spdlog.git v1.11.0) get_third_dep(googletest https://ghproxy.com/https://github.com/google/googletest.git release-1.12.1) get_third_dep(asio https://ghproxy.com/https://github.com/chriskohlhoff/asio.git asio-1-28-0) # 添加 head only 库 add_library(asio INTERFACE) target_include_directories(asio INTERFACE ${CMAKE_BINARY_DIR}/_deps/src/asio/asio/include ) target_compile_definitions(asio INTERFACE ASIO_STANDALONE ASIO_NO_DEPRECATED ) target_link_libraries(asio INTERFACE pthread ) 添加 yacc lex 编译 find_package(FLEX REQUIRED) find_package(BISON 3.5.0 REQUIRED) bison_target(parser ${PROJECT_SOURCE_DIR}/src/parser/parser.yy ${PROJECT_SOURCE_DIR}/src/parser/parser.cpp # DEFINES_FILE ${PROJECT_SOURCE_DIR}/src/include/parser/parser.hpp COMPILE_FLAGS ${bison_flags}) flex_target(scanner ${PROJECT_SOURCE_DIR}/src/parser/scanner.lex ${PROJECT_SOURCE_DIR}/src/parser/scanner.cpp) ADD_FLEX_BISON_DEPENDENCY(scanner parser) add_library(ASKY_lib SHARED ${ASKY_SRC} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} ) 添加单元测试 function(add_cosmos_test test_name test_file) add_executable(${test_name} ${test_file}) target_link_libraries(${test_name} PRIVATE gtest gtest_main ASKY_lib) add_test(NAME ${test_name} COMMAND ${test_name}) endfunction(add_cosmos_test) foreach(TEST_SOURCE_FILE ${ASKY_TEST_SRC}) file(RELATIVE_PATH ASKY_TEST_CPP_REL &amp;#34;${PROJECT_SOURCE_DIR}/test&amp;#34; ${TEST_SOURCE_FILE}) get_filename_component(NOISEPAGE_TEST_DIR ${ASKY_TEST_CPP_REL} DIRECTORY) get_filename_component(NOISEPAGE_TEST ${TEST_SOURCE_FILE} NAME_WE) add_cosmos_test(${NOISEPAGE_TEST} ${TEST_SOURCE_FILE}) endforeach() 添加 自定义 command # clang-format add_custom_target(format</description></item></channel></rss>