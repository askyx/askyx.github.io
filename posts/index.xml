<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>归档 on Askyx's Blog</title><link>https://askyx.github.io/posts/</link><description>Recent content in 归档 on Askyx's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><atom:link href="https://askyx.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Wsl 常见问题记录</title><link>https://askyx.github.io/posts/note/wsl/</link><pubDate>Tue, 03 Sep 2024 10:40:40 +0800</pubDate><guid>https://askyx.github.io/posts/note/wsl/</guid><description>1. WSL 内核版本升级 https://learn.microsoft.com/en-us/community/content/wsl-user-msft-kernel-v6 https://blog.yurzi.net/posts/a-try-to-upgrade-wsl-kernel/#cite-3 https://zhuanlan.zhihu.com/p/18715471543 这里可以直接升级内核，然后功能全开，perf 自然也可以直接使用，当然也可以针对当前版本，编译 perf 安装 确定内核版本 ❯ uname -a Linux</description></item><item><title>orca 简记</title><link>https://askyx.github.io/posts/database/gp/orca/</link><pubDate>Thu, 13 Jun 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/database/gp/orca/</guid><description>框架 与外部交互使用的是 dxl * 内部预置大量的序列化的文件，包含元数据信息，测试文件等 * 集成到 gp 的时候，Query 结构体使用 CTranslatorQueryToDXL 转换 后续由 CTranslatorDXLToExpr 转换为 CExpression</description></item><item><title>Postgres Hash Join</title><link>https://askyx.github.io/posts/postgres/hashjoin/</link><pubDate>Fri, 08 Mar 2024 09:01:31 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/hashjoin/</guid><description>理论依据 使用 hybrid hash join 实现的hash join，大意是： outer 和 inner 无法完全使用内存实现 hash join，所以需要把数据分区 dump 到磁盘中，每个分区称为一个 bat</description></item><item><title>源码编译 OpenTenBase 速通版</title><link>https://askyx.github.io/posts/database/tbase/build/</link><pubDate>Fri, 05 Jan 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/database/tbase/build/</guid><description>shell git clone --depth=1 https://hub.fgit.cf/OpenTenBase/OpenTenBase.git docker run -itd --name tbase --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/OpenTenBase,target=/workspaces/OpenTenBase runner bash docker exec -it -u vscode tbase bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/OpenTenBase mkdir -p .build/making mkdir .data cd .build/making /workspaces/OpenTenBase/configure --prefix=/home/vscode/.build --enable-user-switch --with-openssl --with-ossp-uuid --enable-alltype-distri CFLAGS=&amp;#34;-fgnu89-inline -g -O0&amp;#34; make -j64 &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd contrib &amp;amp;&amp;amp;</description></item><item><title>cmake 速查模板</title><link>https://askyx.github.io/posts/others/cmake/</link><pubDate>Wed, 09 Aug 2023 17:34:54 +0800</pubDate><guid>https://askyx.github.io/posts/others/cmake/</guid><description>cmake 速记模板 cmake 升级 https://zhuanlan.zhihu.com/p/513871916 wget https://github.com/Kitware/CMake/releases/download/v3.23.0/cmake-3.23.0-linux-x86_64.sh sudo bash ./cmake-3.23.0-linux-x86_64.sh --skip-licence --prefix=/usr/local sudo update-alternatives --install /usr/bin/cmake cmake /usr/local/cmake-4.0.3-linux-x86_64/bin/cmake 10 Do you accept the license? [yn]: By default the CMake will be installed in: &amp;#34;/usr/cmake-3.23.0-linux-x86_64&amp;#34; Do you want to include the subdirectory cmake-3.23.0-linux-x86_64? Saying no will install in: &amp;#34;/usr&amp;#34; [Yn]: 修改 PATH 添加第三方库 include(FetchContent) function(get_third_dep dep_name dep_url dep_tag) FetchContent_Declare(${dep_name} QUIET SOURCE_DIR</description></item><item><title>gdb 要点简记</title><link>https://askyx.github.io/posts/others/gdb/</link><pubDate>Tue, 11 Jul 2023 10:17:52 +0800</pubDate><guid>https://askyx.github.io/posts/others/gdb/</guid><description>配置 set print pretty on set print elements unlimited set pagination off python 脚本 直接安装的 gdb 都是预先编译 python 的，可以使用 python 实现一些有用的功能，比如自定义命令，打印自定义类型等。可以参考 gdb python 扩</description></item><item><title>Postgres 技术内幕，Optimizer过程分析</title><link>https://askyx.github.io/posts/postgres/optimizer/</link><pubDate>Mon, 08 May 2023 11:33:02 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/optimizer/</guid><description>1. 逻辑优化 1. 子查询提升 exist 相关子链接会被提升，非相关子链接不会进行优化， 但是会生成 initplan，只需要执行一次 any 相关子查询不会提升，非相关</description></item><item><title>宏使用模板速查</title><link>https://askyx.github.io/posts/postgres/defineinc/</link><pubDate>Wed, 22 Feb 2023 14:00:48 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/defineinc/</guid><description>前置知识 C语言宏的定义和宏的使用方法 变长参数 这里输出的是相同类型的参数日志，不同的需要特殊处理，或者直接自定义输出格式 缺点： 参数类型固定 #include &amp;lt;stdio.h&amp;gt;</description></item><item><title>执行计划代价计算规则梳理</title><link>https://askyx.github.io/posts/postgres/cost/</link><pubDate>Fri, 17 Feb 2023 09:38:28 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/cost/</guid><description>表和各个index的物理结构及数据操作 统计信息 cost 计算 demo 选择率的计算 基表cost index cost pageinspect PostgreSQL索引系列文章链接汇总 统计信息与选择率</description></item><item><title>事务知识简记</title><link>https://askyx.github.io/posts/postgres/tx/</link><pubDate>Wed, 08 Feb 2023 09:58:09 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/tx/</guid><description>事务基础 ACID 事务演进 隔离级别 MVCC 2pl 主流数据库实现 PG事务 pg高链接数导致tps下降 1|2 简单总结 更新xmin的ping-pong问题，缓存失效，之前</description></item><item><title>Bison Note</title><link>https://askyx.github.io/posts/course/15441/note/</link><pubDate>Thu, 17 Nov 2022 14:34:14 +0800</pubDate><guid>https://askyx.github.io/posts/course/15441/note/</guid><description>note As Bison reads tokens, it pushes them onto a stack along with their semantic values. The stack is called the parser stack. Pushing a token is traditionally called shifting. When the last n tokens and groupings shifted match the components of a grammar rule, they can be combined according to that rule. This is called reduction The lookahead token is stored in the variable yychar. Its semantic value and</description></item><item><title>Libpqxx</title><link>https://askyx.github.io/posts/readcode/libpqxx/</link><pubDate>Tue, 08 Nov 2022 14:35:50 +0800</pubDate><guid>https://askyx.github.io/posts/readcode/libpqxx/</guid><description>定位 c++的客户端接口，官方指定，特点时使用比较激进的C++实现，最新代码编译需要支持C++17，下个版本需要C++20，和其他pg对外接口</description></item><item><title>内存管理</title><link>https://askyx.github.io/posts/postgres/memctx/</link><pubDate>Tue, 01 Nov 2022 12:01:31 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/memctx/</guid><description>内存上下文 https://smartkeyerror.com/PostgreSQL-MemoryContext 源码主要在mctx.c中，主要是目的是设置工作空间，避免重复的在系统上申请资源，且为了避免异常情况下的内存泄露问题，所以实现了内</description></item><item><title>RocksDB源码分析</title><link>https://askyx.github.io/posts/readcode/rocksdb/</link><pubDate>Fri, 21 Oct 2022 16:38:26 +0800</pubDate><guid>https://askyx.github.io/posts/readcode/rocksdb/</guid><description>note1 slice 和levelDB类似，无太大变化 PinnableSlice http://kernelmaker.github.io/Rocksdb_pinnableslice 主要作用是延长数据生命周期，减少数据拷贝。PinnableSlice中记录数据的指针，使用的时候通过</description></item><item><title>postgres Parser</title><link>https://askyx.github.io/posts/postgres/parser/</link><pubDate>Mon, 10 Oct 2022 12:03:18 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/parser/</guid><description>BISON 1.2 From Formal Rules to Bison Input Terminal Nonterminal 1.3 Semantic Values A formal grammar selects tokens only by their classifications each token in a Bison grammar has both a token kind and a semantic value 强类型，有类型和值的区别 1.4 Semantic Actions The action says how to produce the semantic value 1.5 Writing GLR Parsers 略，默认是</description></item><item><title>Locks</title><link>https://askyx.github.io/posts/postgres/locks/</link><pubDate>Wed, 28 Sep 2022 15:42:18 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/locks/</guid><description>SpinLock 使用tas实现的自旋锁。 while (TAS_SPIN(lock)) { perform_spin_delay(&amp;amp;delayStatus); } perform_spin_delay(SpinDelayStatus *status) { /* CPU-specific delay each time through the loop */ SPIN_DELAY(); /* Block the process every spins_per_delay tries */ if (++(status-&amp;gt;spins) &amp;gt;= spins_per_delay) { if (++(status-&amp;gt;delays) &amp;gt; NUM_DELAYS) s_lock_stuck(status-&amp;gt;file, status-&amp;gt;line, status-&amp;gt;func); if (status-&amp;gt;cur_delay == 0) /* first time to delay? */ status-&amp;gt;cur_delay = MIN_DELAY_USEC; pg_usleep(status-&amp;gt;cur_delay); /* increase delay by a</description></item><item><title>Postgres Optimizer</title><link>https://askyx.github.io/posts/postgres/opt/</link><pubDate>Fri, 22 Jul 2022 09:24:24 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/opt/</guid><description>Postgres Optimizer Extend 对文章的技术性验证 These directories take the Query structure returned by the parser, and generate a plan used by the executor. The /plan directory generates the actual output plan, the /path code generates all possible ways to join the tables, and /prep handles various preprocessing steps for special cases. /util is utility stuff. /geqo is the separate &amp;ldquo;genetic optimization&amp;rdquo; planner &amp;mdash;</description></item><item><title>Postgres Storage</title><link>https://askyx.github.io/posts/postgres/storage/</link><pubDate>Thu, 21 Jul 2022 09:15:05 +0800</pubDate><guid>https://askyx.github.io/posts/postgres/storage/</guid><description>存储 内存 共享内存 本地内存 缓存 内存上下文 缓存空间管理 数据块的缓存，减少磁盘IO，有共享缓存和进程缓存 Cache 数据块之外的缓存，例如系统表 系统表缓存不</description></item><item><title>数据库文章资源汇总</title><link>https://askyx.github.io/posts/static/note/</link><pubDate>Wed, 20 Jul 2022 17:44:29 +0800</pubDate><guid>https://askyx.github.io/posts/static/note/</guid><description>爬虫 import requests from bs4 import BeautifulSoup prefix = &amp;#39;http://mysql.taobao.org&amp;#39; # 获取文章名和url（文章名,url） def query_name_url(url: str): resp = requests.get(url) soup = BeautifulSoup(resp.content.decode(&amp;#39;utf-8&amp;#39;), &amp;#34;html.parser&amp;#34;) tags = soup.findAll(&amp;#39;a&amp;#39;, {&amp;#39;target&amp;#39;: {&amp;#39;_top&amp;#39;}}) urls = [v for v in tags if v[&amp;#39;href&amp;#39;].find(&amp;#39;/monthly/&amp;#39;) != -1] return [(str(v.string).strip(), prefix + v[&amp;#39;href&amp;#39;]) for v in urls] # 获取所有</description></item><item><title>15445课程笔记</title><link>https://askyx.github.io/posts/course/15445/note/</link><pubDate>Fri, 10 Jun 2022 11:07:10 +0800</pubDate><guid>https://askyx.github.io/posts/course/15445/note/</guid><description>https://15445.courses.cs.cmu.edu/fall2021/notes/02-advancedsql.pdf output control 控制输出结果，例如order，limit等 窗口函数 CTE Common Table Expressions，把一个语句的输出视为一张临时表参与下面的语句的运算 WITH cte1</description></item><item><title>Raft</title><link>https://askyx.github.io/posts/course/6.824/raft/</link><pubDate>Mon, 30 May 2022 18:51:02 +0800</pubDate><guid>https://askyx.github.io/posts/course/6.824/raft/</guid><description>译文 原文 有用的飞书文档 和其他的算法相比 Strong leader 日志只能从领导者发送到其他节点 Leader election 随机计时器选举领导，在心跳机制上加上一些额外的工作 Membership changes 角色变换 Replicated</description></item><item><title>GFS</title><link>https://askyx.github.io/posts/course/6.824/gfs/</link><pubDate>Mon, 30 May 2022 16:36:40 +0800</pubDate><guid>https://askyx.github.io/posts/course/6.824/gfs/</guid><description>GFS是一个大规模可扩展的可容错的分布式文件系统。Google三大篇论文之一 翻译文章在这里 论文在这里 6.824 Q&amp;amp;A GFS的特点 运行在廉价的机器上，节约</description></item><item><title>Mapreduce</title><link>https://askyx.github.io/posts/course/6.824/mapreduce/</link><pubDate>Sun, 29 May 2022 21:05:46 +0800</pubDate><guid>https://askyx.github.io/posts/course/6.824/mapreduce/</guid><description>利用普通机器组成的大规模计算集群进行并行的,高容错,高性能的数据处理函数框架 原始论文点这里,论文翻译点这里，有时间的话，自行对比翻译和原文 最</description></item><item><title>Coursenote</title><link>https://askyx.github.io/posts/course/6.824/coursenote/</link><pubDate>Tue, 17 May 2022 13:17:04 +0800</pubDate><guid>https://askyx.github.io/posts/course/6.824/coursenote/</guid><description>随堂笔记 Why do people build distributed systems? to increase capacity via parallel processing to tolerate faults via replication to match distribution of physical devices e.g. sensors to achieve security via isolation 分布式的困难点： 大量的并发操作 具有容错性 难于实现 Lab 1: distributed big-data framework (like MapReduce) Lab 2: fault tolerance library</description></item><item><title>LevelDB源码阅读</title><link>https://askyx.github.io/posts/readbooks/leveldb/</link><pubDate>Sun, 15 May 2022 21:59:53 +0800</pubDate><guid>https://askyx.github.io/posts/readbooks/leveldb/</guid><description>LevelDB: version 1.23 Date: Thu Oct 20 15:32:47 2022 CPU: 16 * AMD Ryzen 9 5900HS with Radeon Graphics CPUCache: 512 KB Keys: 16 bytes each Values: 100 bytes each (50 bytes after compression) Entries: 1000000 RawSize: 110.6 MB (estimated) FileSize: 62.9 MB (estimated) ------------------------------------------------ fillseq : 1.394 micros/op; 79.3 MB/s fillsync : 1208.178 micros/op; 0.1 MB/s (1000 ops) fillrandom : 1.948 micros/op; 56.8 MB/s overwrite : 2.448 micros/op; 45.2</description></item><item><title>VolcanoOptimizer</title><link>https://askyx.github.io/posts/readbooks/volcanooptimizer/</link><pubDate>Mon, 04 Apr 2022 22:10:50 +0800</pubDate><guid>https://askyx.github.io/posts/readbooks/volcanooptimizer/</guid><description>NOTE 论文阅读笔记The Volcano Optimizer Generator: Extensibility and Efficient Search 可扩展 面向对象 自顶向下 剪枝 原型是EXODUS， Volcano是对他的改进 可以单独使用的优化器 优化搜索时间和</description></item><item><title>Columbia Optimizer</title><link>https://askyx.github.io/posts/readbooks/columbia-optimizer/</link><pubDate>Sat, 02 Apr 2022 16:55:12 +0800</pubDate><guid>https://askyx.github.io/posts/readbooks/columbia-optimizer/</guid><description>start EFFICIENCY IN THE COLUMBIA DATABASE QUERY OPTIMIZER 优化器发展版本 第一代 模块化的，分层的，可扩展的，基于规则的优化器 扩展的复杂性，搜索性能 第二代 类似Volcano，更加优秀的优</description></item><item><title>现代C++白皮书</title><link>https://askyx.github.io/posts/readbooks/%E7%8E%B0%E4%BB%A3c++%E7%99%BD%E7%9A%AE%E4%B9%A6/</link><pubDate>Sun, 06 Mar 2022 20:46:08 +0800</pubDate><guid>https://askyx.github.io/posts/readbooks/%E7%8E%B0%E4%BB%A3c++%E7%99%BD%E7%9A%AE%E4%B9%A6/</guid><description>读者序 之前没有好好的阅读过一本任何技术书籍，一般都是打开前几张，然后慢慢的失去耐心，所有造成的问题是一些书籍上的知识，只会对前面的章节有记忆</description></item><item><title>Envs</title><link>https://askyx.github.io/posts/others/envs/</link><pubDate>Mon, 21 Feb 2022 19:00:25 +0800</pubDate><guid>https://askyx.github.io/posts/others/envs/</guid><description>hugo wget https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb https://github.91chi.fun/https://github.com//gohugoio/hugo/releases/download/v0.92.2/hugo_extended_0.92.2_Linux-64bit.deb sudo dpkg -i hugo*.deb 140.82.113.3 aria2c -s 5 https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb 可以使用aria2下载，ubuntu使用apt install aria2直接安装工具，使用-s开启多路下载 aria2c -s 5 https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb manage</description></item><item><title>Docker</title><link>https://askyx.github.io/posts/others/docker/</link><pubDate>Sun, 20 Feb 2022 21:17:58 +0800</pubDate><guid>https://askyx.github.io/posts/others/docker/</guid><description>基础概念 Docker使用go开发的一种沙箱工具，他使得应用可以单独运行在沙箱中，通过端口映射或者volumes与外界进行交互。这可以让一个机</description></item><item><title/><link>https://askyx.github.io/posts/others/log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://askyx.github.io/posts/others/log/</guid><description>语句 prepare s3(int, int) as select no_o_id from bmsql_new_order where no_w_id = $1 and no_d_id = $2 order by no_o_id asc; QUERY PLAN --------------------------------------------------------------------------------------------------- Cluster Gather (cost=291.52..430.37 rows=459 width=4) Remote node: 16386 -&amp;gt; Sort (cost=291.52..292.67 rows=459 width=4) Output: no_o_id Sort Key: bmsql_new_order.no_o_id -&amp;gt; Bitmap Heap Scan on public.bmsql_new_order (cost=13.46..271.23 rows=459 width=4) Output: no_o_id Recheck Cond: ((bmsql_new_order.no_w_id = 1) AND (bmsql_new_order.no_d_id = 1)) -&amp;gt; Bitmap Index Scan on bmsql_new_order_pkey (cost=0.00..13.34</description></item><item><title/><link>https://askyx.github.io/posts/others/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%80%BB%E8%BE%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://askyx.github.io/posts/others/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%80%BB%E8%BE%91/</guid><description>predicate_refuted_by 和 make_new_qual_list的运行逻辑以及PARAM 无法选出一个节点的原因 make_new_qual_list需要使用表达式和分</description></item><item><title/><link>https://askyx.github.io/posts/personal/%E7%AE%80%E5%8E%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://askyx.github.io/posts/personal/%E7%AE%80%E5%8E%86/</guid><description>文磊 个人信息 性 别：男 年 龄：29 手 机：18705169510 邮 箱：404061090@qq.com 工作及教育经历 湖南亚信安慧科技有限公司 2022.7~now AntDB-T S</description></item><item><title/><link>https://askyx.github.io/posts/postgres/sublink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://askyx.github.io/posts/postgres/sublink/</guid><description>typedef struct SubPlan { pg_node_attr(no_query_jumble) Expr xpr; /* Fields copied from original SubLink: */ SubLinkType subLinkType; /* see above */ /* The combining operators, transformed to an executable expression: */ Node *testexpr; /* OpExpr or RowCompareExpr expression tree */ List *paramIds; /* IDs of Params embedded in the above */ /* Identification of the Plan tree to use: */ int plan_id; /* Index (from 1) in PlannedStmt.subplans */ /* Identification</description></item><item><title/><link>https://askyx.github.io/posts/static/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://askyx.github.io/posts/static/mysql/</guid><description/></item></channel></rss>