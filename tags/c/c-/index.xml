<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C/C++ on Asky</title><link>https://askyx.github.io/tags/c/c-/</link><description>Recent content in C/C++ on Asky</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="https://askyx.github.io/tags/c/c-/index.xml" rel="self" type="application/rss+xml"/><item><title>cmake 速查模板</title><link>https://askyx.github.io/posts/cmake/</link><pubDate>Wed, 09 Aug 2023 17:34:54 +0800</pubDate><guid>https://askyx.github.io/posts/cmake/</guid><description>cmake 速记模板 添加第三方库 include(FetchContent) function(get_third_dep dep_name dep_url dep_tag) FetchContent_Declare(${dep_name} QUIET SOURCE_DIR ${CMAKE_BINARY_DIR}/_deps/src/${dep_name} BINARY_DIR ${CMAKE_BINARY_DIR}/_deps/build/${dep_name} SUBBUILD_DIR ${CMAKE_BINARY_DIR}/_deps/sub/${dep_name} GIT_REPOSITORY ${dep_url} GIT_TAG ${dep_tag} GIT_PROGRESS TRUE GIT_SHALLOW TRUE ) FetchContent_MakeAvailable(${dep_name}) endfunction(get_third_dep) get_third_dep(spdlog https://ghproxy.com/https://github.com/gabime/spdlog.git v1.11.0) get_third_dep(googletest https://ghproxy.com/https://github.com/google/googletest.git release-1.12.1) get_third_dep(asio https://ghproxy.com/https://github.com/chriskohlhoff/asio.git asio-1-28-0) # 添加 head only 库 add_library(asio INTERFACE) target_include_directories(asio INTERFACE ${CMAKE_BINARY_DIR}/_deps/src/asio/asio/include ) target_compile_definitions(asio INTERFACE ASIO_STANDALONE ASIO_NO_DEPRECATED ) target_link_libraries(asio INTERFACE pthread ) 添加 yacc lex 编译 find_package(FLEX REQUIRED) find_package(BISON 3.5.0 REQUIRED) bison_target(parser ${PROJECT_SOURCE_DIR}/src/parser/parser.yy ${PROJECT_SOURCE_DIR}/src/parser/parser.cpp # DEFINES_FILE ${PROJECT_SOURCE_DIR}/src/include/parser/parser.hpp COMPILE_FLAGS ${bison_flags}) flex_target(scanner ${PROJECT_SOURCE_DIR}/src/parser/scanner.lex ${PROJECT_SOURCE_DIR}/src/parser/scanner.cpp) ADD_FLEX_BISON_DEPENDENCY(scanner parser) add_library(ASKY_lib SHARED ${ASKY_SRC} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} ) 添加单元测试 function(add_cosmos_test test_name test_file) add_executable(${test_name} ${test_file}) target_link_libraries(${test_name} PRIVATE gtest gtest_main ASKY_lib) add_test(NAME ${test_name} COMMAND ${test_name}) endfunction(add_cosmos_test) foreach(TEST_SOURCE_FILE ${ASKY_TEST_SRC}) file(RELATIVE_PATH ASKY_TEST_CPP_REL &amp;#34;${PROJECT_SOURCE_DIR}/test&amp;#34; ${TEST_SOURCE_FILE}) get_filename_component(NOISEPAGE_TEST_DIR ${ASKY_TEST_CPP_REL} DIRECTORY) get_filename_component(NOISEPAGE_TEST ${TEST_SOURCE_FILE} NAME_WE) add_cosmos_test(${NOISEPAGE_TEST} ${TEST_SOURCE_FILE}) endforeach() 添加 自定义 command # clang-format add_custom_target(format</description></item><item><title>宏使用模板速查</title><link>https://askyx.github.io/posts/defineinc/</link><pubDate>Wed, 22 Feb 2023 14:00:48 +0800</pubDate><guid>https://askyx.github.io/posts/defineinc/</guid><description>前置知识 C语言宏的定义和宏的使用方法 变长参数 这里输出的是相同类型的参数日志，不同的需要特殊处理，或者直接自定义输出格式 缺点： 参数类型固定 #include &amp;lt;stdio.h&amp;gt; double xxa = 1.0f; double xxb = 1.2f; double xxc = 1.3f; double xxd = 1.4f; double xxe = 1.5f; double xxf = 1.6f; double xxg = 1.7f; double xxh = 1.8f; double xxi = 1.9f; #define DUMPVAR(VAR) #VAR &amp;#34;(%.2lf)&amp;#34; #define FL_DOARG1(a, ...) DUMPVAR(a) #define FL_DOARG2(a, v, ...) FL_DOARG1(a) &amp;#34;, &amp;#34; FL_DOARG1(v, __VA_ARGS__) #define FL_DOARG3(a, v, ...) FL_DOARG1(a) &amp;#34;, &amp;#34; FL_DOARG2(v, __VA_ARGS__) #define FL_DOARG4(a, v, ...) FL_DOARG1(a) &amp;#34;, &amp;#34; FL_DOARG3(v,</description></item></channel></rss>