<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postgres on Asky</title><link>https://askyx.github.io/tags/postgres/</link><description>Recent content in Postgres on Asky</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 05 Jan 2024 11:07:23 +0800</lastBuildDate><atom:link href="https://askyx.github.io/tags/postgres/index.xml" rel="self" type="application/rss+xml"/><item><title>源码编译 GreenPlum 速通版</title><link>https://askyx.github.io/posts/build/</link><pubDate>Fri, 05 Jan 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/build/</guid><description>shell git clone --depth=1 https://hub.fgit.cf/greenplum-db/gpdb.git -b 7.0.0 docker run -itd --name gpdb --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/gpdb,target=/workspaces/gpdb runner bash docker exec -it -u vscode gpdb bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/gpdb # 不支持其他文件夹编译，只能在gpdb目录下 cd /workspaces/gpdb sudo apt install -y libkrb5-dev krb5-config iproute2 libossp-uuid-dev libapr1-dev libyaml-dev libxerces-c-dev less rsync pip libevent-dev ./configure --with-perl --enable-orca --with-python --with-libxml --with-gssapi --enable-debug CFLAGS=-O0 CXXFLAGS=-O0 --prefix=/home/vscode/.build make -j64 &amp;amp;&amp;amp; make install # .bashrc 文件 cat &amp;gt; /home/vscode/.bashrc &amp;lt;&amp;lt;EOF source /home/vscode/.build/greenplum_path.sh alias psql=&amp;#39;psql -p 7000&amp;#39; alias gpstart=&amp;#39;gpstart -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1&amp;#39; alias gpstop=&amp;#39;gpstop -d /workspaces/gpdb/gpAux/gpdemo/datadirs/qddir/demoDataDir-1&amp;#39; alias sqps=&amp;#34;echo &amp;#39;USER PID PPID VSZ CMD&amp;#39; ; ps -eo user,pid,ppid,vsize,cmd | grep -E &amp;#39;postgres&amp;#39; &amp;#34; EOF</description></item><item><title>源码编译 OpenTenBase 速通版</title><link>https://askyx.github.io/posts/build/</link><pubDate>Fri, 05 Jan 2024 11:07:23 +0800</pubDate><guid>https://askyx.github.io/posts/build/</guid><description>shell git clone --depth=1 https://hub.fgit.cf/OpenTenBase/OpenTenBase.git docker run -itd --name tbase --cap-add=SYS_PTRACE --privileged=true --hostname vscode --mount type=bind,source=/home/wen/OpenTenBase,target=/workspaces/OpenTenBase runner bash docker exec -it -u vscode tbase bash sudo service ssh start ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 700 ~/.ssh chmod 644 ~/.ssh/authorized_keys sudo chown vscode:vscode -R /workspaces/OpenTenBase mkdir -p .build/making mkdir .data cd .build/making /workspaces/OpenTenBase/configure --prefix=/home/vscode/.build --enable-user-switch --with-openssl --with-ossp-uuid --enable-alltype-distri CFLAGS=&amp;#34;-fgnu89-inline -g -O0&amp;#34; make -j64 &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; cd contrib &amp;amp;&amp;amp; make -j64 &amp;amp;&amp;amp; make install cd ~ mkdir pgxc_ctl # 写入下面的模板 touch pgxc_ctl/pg.conf # ssh localhost pgxc_ctl -c pg.conf init all createdb -p 6011 vscode # .bashrc 文件 此外，/home/vscode/.build/bin 需要写入到 /etc/environment cat &amp;gt; /home/vscode/.bashrc</description></item><item><title>Postgres Executor</title><link>https://askyx.github.io/posts/postgres_executor/</link><pubDate>Fri, 10 Feb 2023 09:26:50 +0800</pubDate><guid>https://askyx.github.io/posts/postgres_executor/</guid><description>Tue Feb 7 10:19:24 CST 2023 重构， 不想文章变成无用的流水线 节点 refs openGauss数据库源码解析系列文章——执行器解析（二 Postgresql查询执行模块README笔记 执行方式分为两大类，一类是 utility 执行，用于ddl等，底层直接对接某个函数，一类是 dml 算子执行，按树的形式执行，这里关注 dml 算子 总的四大</description></item><item><title>postgres Parser</title><link>https://askyx.github.io/posts/parser/</link><pubDate>Mon, 10 Oct 2022 12:03:18 +0800</pubDate><guid>https://askyx.github.io/posts/parser/</guid><description>BISON 1.2 From Formal Rules to Bison Input Terminal Nonterminal 1.3 Semantic Values A formal grammar selects tokens only by their classifications each token in a Bison grammar has both a token kind and a semantic value 强类型，有类型和值的区别 1.4 Semantic Actions The action says how to produce the semantic value 1.5 Writing GLR Parsers 略，默认是LR文法，但是有RR和SR冲突，所以为了不那么严格限制语法，在一定程度上允许冲突。这里不做了解 1.6 Locations produce verbose and useful error messages 1.7 Bison Output: the Parser Implementation File The tokens come from a function called the</description></item><item><title>Locks</title><link>https://askyx.github.io/posts/locks/</link><pubDate>Wed, 28 Sep 2022 15:42:18 +0800</pubDate><guid>https://askyx.github.io/posts/locks/</guid><description>SpinLock 使用tas实现的自旋锁。 while (TAS_SPIN(lock)) { perform_spin_delay(&amp;amp;delayStatus); } perform_spin_delay(SpinDelayStatus *status) { /* CPU-specific delay each time through the loop */ SPIN_DELAY(); /* Block the process every spins_per_delay tries */ if (++(status-&amp;gt;spins) &amp;gt;= spins_per_delay) { if (++(status-&amp;gt;delays) &amp;gt; NUM_DELAYS) s_lock_stuck(status-&amp;gt;file, status-&amp;gt;line, status-&amp;gt;func); if (status-&amp;gt;cur_delay == 0) /* first time to delay? */ status-&amp;gt;cur_delay = MIN_DELAY_USEC; pg_usleep(status-&amp;gt;cur_delay); /* increase delay by a random fraction between 1X and 2X */ status-&amp;gt;cur_delay += (int) (status-&amp;gt;cur_delay * pg_prng_double(&amp;amp;pg_global_prng_state) + 0.5); /* wrap back to minimum delay when max is exceeded */ if (status-&amp;gt;cur_delay &amp;gt; MAX_DELAY_USEC) status-&amp;gt;cur_delay = MIN_DELAY_USEC; status-&amp;gt;spins = 0; } } 如果没有tas，则使用信号量实现，属于最底层的锁 LWLock https://zhmin.github.io/posts/postgresql-lwlock/ 文档描述清楚</description></item></channel></rss>