<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库 on Esoye</title><link>https://select1fromdual.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 数据库 on Esoye</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 10 Oct 2022 12:03:18 +0800</lastBuildDate><atom:link href="https://select1fromdual.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>postgres Parser</title><link>https://select1fromdual.github.io/posts/postgres/parser/</link><pubDate>Mon, 10 Oct 2022 12:03:18 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/parser/</guid><description>
Postgres parser 模块解析，目的是为了学习parser实现机制。编译原理以及bison和flex的使用</description></item><item><title>Locks</title><link>https://select1fromdual.github.io/posts/postgres/locks/</link><pubDate>Wed, 28 Sep 2022 15:42:18 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/locks/</guid><description>
PG 中锁的分析</description></item><item><title>vacuum 和 analyze 过程分析</title><link>https://select1fromdual.github.io/posts/postgres/vacuum/</link><pubDate>Mon, 26 Sep 2022 16:37:37 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/vacuum/</guid><description>
AntDB VACUUM 流程</description></item><item><title>Greenplum</title><link>https://select1fromdual.github.io/posts/postgres/greenplum/</link><pubDate>Wed, 10 Aug 2022 20:22:49 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/greenplum/</guid><description>
GreenPlum优化器和执行器的源码调研</description></item><item><title>Postgres 系列数据库搭建</title><link>https://select1fromdual.github.io/posts/postgres/pgenvbuild/</link><pubDate>Fri, 29 Jul 2022 14:00:48 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/pgenvbuild/</guid><description>
PG系数据库统一安装环境，使用Docker &amp;&amp; VSCode on Ubuntu22搭建，这里总结整理，后续PG系得数据库安装方法统一在这里总结</description></item><item><title>Postgres Storage</title><link>https://select1fromdual.github.io/posts/postgres/storage/</link><pubDate>Thu, 21 Jul 2022 09:15:05 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/storage/</guid><description>
存储 # 内存 # 共享内存
本地内存
缓存
内存上下文
缓存空间管理
数据块的缓存，减少磁盘IO，有共享缓存和进程缓存
Cache
数据块之外的缓存，例如系统表
系统表缓存不会缓存整个表，是以block为单位缓存？ 虚拟文件描述符
系统中文件有打开的上限，使用VFD可以突破这种限制，本质上是一个LRU缓存
空闲空间定位
快速定位磁盘中的空闲空间以插入数据
进程间通信 使用共享内存或者信号量通信
读取过程 # 从系统表中读取表的元数据信息构造元组信息 尝试从缓存读取数据 使用SMGR从磁盘读取数据到缓存中，SMGR是一个抽象层，用于实现不同存储介质的管理 SMGR和存储介质之间使用VFD来管理文件描述符，以突破系统的FD限制 标记删除，vacuum清理数据 FSM记录空闲空间 磁盘 # 表文件
SMGR
VFD
FSM</description></item><item><title>数据库文章资源汇总</title><link>https://select1fromdual.github.io/posts/static/note/</link><pubDate>Wed, 20 Jul 2022 17:44:29 +0800</pubDate><guid>https://select1fromdual.github.io/posts/static/note/</guid><description>
爬虫 # import requests from bs4 import BeautifulSoup prefix = &amp;#39;http://mysql.taobao.org&amp;#39; # 获取文章名和url（文章名,url） def query_name_url(url: str): resp = requests.get(url) soup = BeautifulSoup(resp.content.decode(&amp;#39;utf-8&amp;#39;), &amp;#34;html.parser&amp;#34;) tags = soup.findAll(&amp;#39;a&amp;#39;, {&amp;#39;target&amp;#39;: {&amp;#39;_blank&amp;#39;}}) urls = [v for v in tags if v[&amp;#39;href&amp;#39;].find(&amp;#39;/monthly/&amp;#39;) != -1] return [(str(v.string).strip(), prefix + v[&amp;#39;href&amp;#39;]) for v in urls] # 获取所有月报链接（月报名,url） def query_monthly_url(): resp = requests.get(&amp;#39;http://mysql.taobao.org/monthly/&amp;#39;) soup = BeautifulSoup(resp.content.decode(&amp;#39;utf-8&amp;#39;), &amp;#34;html.parser&amp;#34;) tags = soup.findAll(&amp;#39;a&amp;#39;, {&amp;#39;class&amp;#39;: {&amp;#39;main&amp;#39;}}) urls = [v for v in tags if v[&amp;#39;href&amp;#39;].</description></item><item><title>Postgres Executor</title><link>https://select1fromdual.github.io/posts/postgres/postgres_executor/</link><pubDate>Wed, 20 Jul 2022 09:26:50 +0800</pubDate><guid>https://select1fromdual.github.io/posts/postgres/postgres_executor/</guid><description>
Postgres 执行器总结</description></item><item><title>15445课程笔记</title><link>https://select1fromdual.github.io/posts/course/15445/note/</link><pubDate>Fri, 10 Jun 2022 11:07:10 +0800</pubDate><guid>https://select1fromdual.github.io/posts/course/15445/note/</guid><description>
https://15445.courses.cs.cmu.edu/fall2021/notes/02-advancedsql.pdf
output control 控制输出结果，例如order，limit等 窗口函数 CTE Common Table Expressions，把一个语句的输出视为一张临时表参与下面的语句的运算 WITH cte1 (col1) AS (SELECT 1), cte2 (col2) AS (SELECT 2) SELECT * FROM cte1, cte2; Database Storage # 数据库的存储介质当前还是磁盘，IO慢 数据库存储要点之一是使用缓存维护数据在磁盘和内存之间的数据交换，以实现数据的快速读写 顺序读写和随机读写 顺序读写的意思是需要定位到读写的位置才能操作，例如链表。 随机读写的意思是可以直接定位到读写的位置，例如数组。 由于磁盘上随机读写速度不如顺序读写，所以当前数据库还是需要想办法使用顺序读写，例如LSM，GFS等架构都是因为这个原因导致的 磁盘和内存中数据的组织格式 # 数据全部在磁盘上，按page组织数据，内存中使用buffer pool维护缓存，磁盘中有一个page专门维护page的位置信息，使用的时候先读取此page到内存，然后 然后读取其他page到buffer pool，使用buffer pool维护page的置换情况，例如LRU，或者其他算法
可以参考lab1和slide，还是比较明显的
buffer pool中的page可以用于上层的数据运算
使用mmap可以完成类似的操作，但是实际上在使用中，如果在发生缺页中断的时候，mmap需要进行置换操作，所以会阻碍程序进程。且mmap是通用的组件，所以没有对数据库 的使用场景进行一些优化，
You never want to use mmap in your DBMS if you need to write.</description></item></channel></rss>