<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码阅读 on Askyx's Blog</title><link>https://askyx.github.io/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link><description>Recent content in 源码阅读 on Askyx's Blog</description><generator>Hugo</generator><language>zh-Hans</language><lastBuildDate>Mon, 21 Jul 2025 18:57:57 +0800</lastBuildDate><atom:link href="https://askyx.github.io/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>RocksDB源码分析</title><link>https://askyx.github.io/posts/readcode/rocksdb/</link><pubDate>Fri, 21 Oct 2022 16:38:26 +0800</pubDate><guid>https://askyx.github.io/posts/readcode/rocksdb/</guid><description>&lt;p>&lt;a href="http://alexstocks.github.io/html/rocksdb.html" target="_blank">note1&lt;/a>
&lt;/p>
&lt;h2 id="slice">slice&lt;/h2>
&lt;p>和levelDB类似，无太大变化&lt;/p>
&lt;h2 id="pinnableslice">PinnableSlice&lt;/h2>
&lt;p>&lt;a href="http://kernelmaker.github.io/Rocksdb_pinnableslice" target="_blank">http://kernelmaker.github.io/Rocksdb_pinnableslice&lt;/a>
&lt;br>
主要作用是延长数据生命周期，减少数据拷贝。PinnableSlice中记录数据的指针，使用的时候通过指针进行解引用。不需要从最底层进行数据的copy，数据的生命周期使用&lt;code>Reset&lt;/code>和其析构函数确定，此时调用cleanup注册的cleanup函数对数据进行处理，&lt;/p></description></item><item><title>LevelDB源码阅读</title><link>https://askyx.github.io/posts/readbooks/leveldb/</link><pubDate>Sun, 15 May 2022 21:59:53 +0800</pubDate><guid>https://askyx.github.io/posts/readbooks/leveldb/</guid><description>&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>LevelDB: version &lt;span style="color:#ae81ff">1.23&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date: Thu Oct &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">47&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CPU: &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#f92672">*&lt;/span> AMD Ryzen &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">5900&lt;/span>HS with Radeon Graphics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CPUCache: &lt;span style="color:#ae81ff">512&lt;/span> KB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Keys: &lt;span style="color:#ae81ff">16&lt;/span> bytes each
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Values: &lt;span style="color:#ae81ff">100&lt;/span> bytes each (&lt;span style="color:#ae81ff">50&lt;/span> bytes after compression)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Entries: &lt;span style="color:#ae81ff">1000000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RawSize: &lt;span style="color:#ae81ff">110.6&lt;/span> MB (estimated)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FileSize: &lt;span style="color:#ae81ff">62.9&lt;/span> MB (estimated)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fillseq : &lt;span style="color:#ae81ff">1.394&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">79.3&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fillsync : &lt;span style="color:#ae81ff">1208.178&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">0.1&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s (&lt;span style="color:#ae81ff">1000&lt;/span> ops)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fillrandom : &lt;span style="color:#ae81ff">1.948&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">56.8&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>overwrite : &lt;span style="color:#ae81ff">2.448&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">45.2&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readrandom : &lt;span style="color:#ae81ff">3.251&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; (&lt;span style="color:#ae81ff">864322&lt;/span> of &lt;span style="color:#ae81ff">1000000&lt;/span> found)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readrandom : &lt;span style="color:#ae81ff">2.947&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; (&lt;span style="color:#ae81ff">864083&lt;/span> of &lt;span style="color:#ae81ff">1000000&lt;/span> found)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readseq : &lt;span style="color:#ae81ff">0.126&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">878.1&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readreverse : &lt;span style="color:#ae81ff">0.216&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">511.4&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>compact : &lt;span style="color:#ae81ff">473557.000&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readrandom : &lt;span style="color:#ae81ff">2.174&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; (&lt;span style="color:#ae81ff">864105&lt;/span> of &lt;span style="color:#ae81ff">1000000&lt;/span> found)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readseq : &lt;span style="color:#ae81ff">0.111&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">997.1&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>readreverse : &lt;span style="color:#ae81ff">0.185&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">598.0&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fill100K : &lt;span style="color:#ae81ff">530.603&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">179.8&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s (&lt;span style="color:#ae81ff">1000&lt;/span> ops)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc32c : &lt;span style="color:#ae81ff">0.904&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">4322.1&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s (&lt;span style="color:#ae81ff">4&lt;/span>K per op)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>snappycomp : &lt;span style="color:#ae81ff">2.353&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">1659.9&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s (output: &lt;span style="color:#ae81ff">55.1&lt;/span>&lt;span style="color:#f92672">%&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>snappyuncomp : &lt;span style="color:#ae81ff">0.390&lt;/span> micros&lt;span style="color:#f92672">/&lt;/span>op; &lt;span style="color:#ae81ff">10026.4&lt;/span> MB&lt;span style="color:#f92672">/&lt;/span>s 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;pre>&lt;code>read: d019e3605f222ebc5a3a2484a2cb29db537551dd
&lt;/code>&lt;/pre>
&lt;p>小且完整的工业存储实现，其中有许多细节是可以借鉴的。这里没有完整的深入每一行代码，后续会时不时的慢慢补充&lt;/p></description></item></channel></rss>